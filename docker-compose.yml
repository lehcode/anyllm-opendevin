version: "3.8"
services:
  # Devin Out-of-The-Box Agent Service
  app:
    container_name: devin-app
    hostname: oppendevin
    image: oppendevin-cuda_${CUDA_VERSION:?}-conda:latest
    pull_policy: always
    build:
      dockerfile: docker/devin/app/Dockerfile
      args:
        litellm_port: ${LITELLM_PORT:?}
        jupyter_port: ${JUPYTER_PORT:?}
        debug: ${DEBUG:-}
        conda_dir: ${APP_DIR:?}/.conda
        nvidia_utils_driver: 550
        app_dir: /opt/opendevin
        venv_name: ${VENV_NAME:?}
        locale: ${LANG:?}
        timezone: ${TZ:?}
    env_file:
      - ./.env
      - docker/devin/app/.env
    command: /docker-entrypoint.sh -m mixtral -e llama2
    depends_on:
      - litellm
      - mitm
      - postgres
      - redis
    networks:
      opendevin-net:
        ipv4_address: ${APP_HOST:?}
    volumes:
      - root_dir_vol:/root
      - pip_cache_vol:/root/.cache/pip:tmpfs=4G
      - conda_vol:${CONDA_PREFIX:?}:tmpfs=4G
      - od_vol:${APP_DIR:?}
      - ./requirements.txt:${APP_DIR:?}/requirements.txt
      - ./environment.yml:${APP_DIR:?}/environment.yml
      - ./workspace:${APP_DIR:?}/workspace
      - ./docker/devin/app/.condarc:${CONDA_PREFIX:?}/.condarc
      # Uncomment mounts if needed for development
      # - ./Makefile:${BUILD_DIR:?}/
      # - ./pyproject.toml:${BUILD_DIR:?}/
      # - ./config.toml.template:${BUILD_DIR:?}/
      # - ./.env:${BUILD_DIR:?}/
      # - ./opendevin:${BUILD_DIR:?}/
      # - ./agenthub:${BUILD_DIR:?}/
      # - ./dev_config:${BUILD_DIR:?}/
      # - ./evaluation:${BUILD_DIR:?}/
      # - ./tests:${BUILD_DIR:?}/
    working_dir: ${APP_DIR}
    tmpfs:
      - /run
      - /tmp
      - /var/run
    ports:
      - "${APP_PORT}:${APP_PORT}"
      - "${JUPYTER_PORT:?}:${JUPYTER_PORT:?}"
    tty: true
    stdin_open: true
    restart: no
    deploy:
      resources:
        reservations:
          devices:
            - driver: "nvidia"
              count: 1
              capabilities: [ "gpu" ]
    healthcheck:
      test: [ "CMD", "curl", "-L", "http://localhost:${APP_PORT}" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 2m

  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    pull_policy: always
    container_name: litellm
    command: "--config /etc/config.yaml --port ${LITELLM_PORT} --num_workers 8 --detailed_debug"
    environment:
      LITELLM_DEFAULT_MODEL: ${LITELLM_DEFAULT_MODEL:?}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_CONTAINER_PORT}/${POSTGRES_DB}
    ports:
      - "${LITELLM_PORT}:4000"
    volumes:
      - pip_cache_vol:/root/.cache/pip:tmpfs=4G
      - ./docker/litellm/config.yaml:/etc/config.yaml
      - ./docker/env_debug.sh:/usr/local/bin/env_debug
    depends_on:
      - redis
      - postgres
      - ollama
    networks:
      - opendevin-net
    healthcheck:
      test: [ "CMD", "litellm", "--health" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 2m
    tmpfs:
      - /run
      - /var/run
      - /tmp
      - /var/tmp

  redis:
    image: redis/redis-stack:latest
    pull_policy: always
    container_name: redis-stack-server
    env_file:
      - .env
      - docker/redis/redis.env
    ports:
      - "0.0.0.0:${REDIS_SERVER_PORT}:6379"
      - "0.0.0.0:${REDIS_INSIGHT_PORT}:8001"
    volumes:
      - redis_data:${REDIS_DATA:-/data}
    networks:
      - opendevin-net

  postgres:
    image: postgres:latest
    pull_policy: always
    container_name: db-postgres
    env_file:
      - .env
      - docker/postgres/postgres.env
    volumes:
      - posgtres_data:${POSTGRES_DATA:-/var/lib/postgres}
    ports:
      - "${POSTGRES_HOST_PORT}:${POSTGRES_CONTAINER_PORT}"
    tmpfs:
      - /var/run:size=1m
      - /tmp
    networks:
      - opendevin-net

  # Ollama service
  ollama:
    image: ollama/ollama
    pull_policy: always
    container_name: ollama-service
    hostname: ollama
    platform: linux/amd64
    env_file:
      - .env
      - docker/ollama/ollama.env
    tty: false
    ports:
      - "22434:11434"
    volumes:
      - ${HOST_MODELS_DIR:?}:/root/.ollama/models
      - pip_cache_vol:/root/.cache/pip
    deploy:
      resources:
        reservations:
          devices:
            - driver: "nvidia"
              count: 1
              capabilities: [ "gpu" ]

    networks:
      - opendevin-net
    tmpfs:
      - /run
      - /var/run
      - /tmp
      - /var/tmp

  mitm:
    image: oppendevin-mitmproxy_${MITMPROXY_VERSION:?}
    pull_policy: always
    build:
      dockerfile: ./docker/mitmproxy/Dockerfile
      args:
        version: ${MITMPROXY_VERSION:?}
        proxy_wheel: mitmproxy-${MITMPROXY_VERSION:?}-py3-none-any.whl
        mitmproxy_dir: ${MITMPROXY_DIR:?}
        uid: 1000
        gid: 1000
    container_name: mitmproxy
    command: "mitmweb --web-host 0.0.0.0 --web-port 8081 --mode reverse:http://ollama:11434@44444 --verbose --anticache --anticomp"
    networks:
      - opendevin-net
    volumes:
      - ./.mitmproxy:${MITMPROXY_DIR:?}
    tty: true
    stdin_open: true
    ports:
      - "0.0.0.0:8081:8081"
    tmpfs:
      - /run
      - /var/run
      - /tmp
      - /var/tmp

  # UI service
  ui:
    container_name: devin-ui
    image: oppendevin_ui-node_${NODE_VERSION:?}-npm_${NPM_VERSION}-pnpm-reactjs
    pull_policy: always
    build:
      dockerfile: docker/devin/ui/Dockerfile
      args:
        node_version: ${NODE_VERSION:?}
        npm_version: ${NPM_VERSION:?}
        node_env: ${NODE_ENV:?}
        debug: ${DEBUG:?}
        node_options: ${NODE_OPTIONS}
    env_file:
      - ./.env
      - docker/devin/ui/.env
    environment:
      BACKEND_HOST: ${APP_HOST:?}:${APP_PORT:?}
      FRONTEND_PORT: ${UI_HTTP_PORT:?}
    networks:
      - opendevin-net
    ports:
      - "${UI_HTTP_PORT:?}:${UI_HTTP_PORT:?}"
      - "${UI_HTTPS_PORT:?}:${UI_HTTPS_PORT:?}"
    tty: false
    entrypoint: "/docker-entrypoint.sh"
    volumes:
      - ./frontend:/opt/ui_build
networks:
  opendevin-net:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
#          gateway: 172.28.111.1

volumes:
  root_dir_vol:
  posgtres_data:
  redis_data:
  pip_cache_vol:
  conda_vol:
  od_vol:
